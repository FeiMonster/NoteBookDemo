package monster.com.mynotebook.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bean.NoteBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_BEAN".
*/
public class NoteBeanDao extends AbstractDao<NoteBean, Void> {

    public static final String TABLENAME = "NOTE_BEAN";

    /**
     * Properties of entity NoteBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Imgge_path = new Property(0, String.class, "imgge_path", false, "IMGGE_PATH");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property CreatTime = new Property(3, String.class, "creatTime", false, "CREAT_TIME");
        public final static Property ResiverTime = new Property(4, String.class, "resiverTime", false, "RESIVER_TIME");
    }


    public NoteBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NoteBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_BEAN\" (" + //
                "\"IMGGE_PATH\" TEXT," + // 0: imgge_path
                "\"TITLE\" TEXT UNIQUE ," + // 1: title
                "\"TEXT\" TEXT," + // 2: text
                "\"CREAT_TIME\" TEXT," + // 3: creatTime
                "\"RESIVER_TIME\" TEXT);"); // 4: resiverTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteBean entity) {
        stmt.clearBindings();
 
        String imgge_path = entity.getImgge_path();
        if (imgge_path != null) {
            stmt.bindString(1, imgge_path);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String creatTime = entity.getCreatTime();
        if (creatTime != null) {
            stmt.bindString(4, creatTime);
        }
 
        String resiverTime = entity.getResiverTime();
        if (resiverTime != null) {
            stmt.bindString(5, resiverTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteBean entity) {
        stmt.clearBindings();
 
        String imgge_path = entity.getImgge_path();
        if (imgge_path != null) {
            stmt.bindString(1, imgge_path);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String creatTime = entity.getCreatTime();
        if (creatTime != null) {
            stmt.bindString(4, creatTime);
        }
 
        String resiverTime = entity.getResiverTime();
        if (resiverTime != null) {
            stmt.bindString(5, resiverTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public NoteBean readEntity(Cursor cursor, int offset) {
        NoteBean entity = new NoteBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imgge_path
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creatTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // resiverTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteBean entity, int offset) {
        entity.setImgge_path(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResiverTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(NoteBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(NoteBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(NoteBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
